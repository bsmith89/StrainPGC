# Imports
import textwrap


configfile: "config.base.yaml"
snakemake.utils.min_version("8.20")

# Config  # Should go in config.yaml
## Main singularity image
## GT-Pro singularity image
## Path to host bowtie2 index
## Path to Illumina adapters
## Path to MIDASDB
## Run parameters
### Preprocesing infix (e.g. hfilt.dedup.deadapt.qtrim}
### Strain-tracking
#### Metagenotype filtering params
##### Coverage across samples
##### Minor allele frequency
#### Metagenotype subsampling params
##### Number of positions
#### StrainFacts model-fitting params
#### Strain purity
##### Strategy
### Pangenome profiling
#### Bowtie2 params
#### Aggregation centroid
### StrainPGC
#### Depth transformation exponent
#### Correlation threshold
#### Depth-ratio threshold

# Metadata  # Paths to metadata files should go in config.yaml?
## Load species list
## Load species genes list?
## Load metagenome paths


# Write Auxiliary Log/Config/Input Files
rule write_species_list:
    output:
        "{config[outdir]}/input/species.list",
    params:
        species_list=lambda w: "\n".join(config["species_list"]),
    shell:
        textwrap.dedent("""
        cat <<EOF > {output}
        {params.species_list}
        EOF
        """)


# Pre-processing Metagenomes
## Link input reads
rule symlink_input_reads:
    output:
        r1="{config[outdir]}/preprocess/reads/{mgen}/r1.fq.gz",
        r2="{config[outdir]}/preprocess/reads/{mgen}/r2.fq.gz",
    input:
        r1=lambda w: config["input"]["reads"][w.mgen]["r1_path"]
        r2=lambda w: config["input"]["reads"][w.mgen]["r2_path"]
    shell:
        """
        ln -rs {input.r1} {output.r1}
        ln -rs {input.r2} {output.r2}
        """


## Filter-out host reads
rule filter_out_human_reads:
    output:
        r1="{config[outdir]}/preprocess/reads/{mgen}/r1{stem}hfilt.fq.gz",
        r2="{config[outdir]}/preprocess/reads/{mgen}/r2{stem}hfilt.fq.gz",
    input:
        script="scripts/filter_out_mapping_reads.sh",  # FIXME
        r1="{config[outdir]}/preprocess/reads/{mgen}/r1{stem}fq.gz",
        r2="{config[outdir]}/preprocess/reads/{mgen}/r2{stem}fq.gz",
        index=[
            "{config[host_index_stem]}.1.bt2",
            "{config[host_index_stem]}.2.bt2",
            "{config[host_index_stem]}.3.bt2",
            "{config[host_index_stem]}.4.bt2",
            "{config[host_index_stem]}.rev.1.bt2",
            "{config[host_index_stem]}.rev.2.bt2",
        ],
    params:
        index="{config[host_index_stem]}",
    threads: 8
    resources:
        mem_mb=10_000,
    shell:
        """
        {input.script} {threads} {params.index} {input.r1} {input.r2} {output.r1} {output.r2}
        """


## Deduplicate
rule deduplicate_reads:
    output:
        r1=temp("{config[outdir]}/preprocess/reads/{mgen}/r1{stem}dedup.fq.gz"),
        r2=temp("{config[outdir]}/preprocess/reads/{mgen}/r2{stem}dedup.fq.gz"),
    input:
        script="scripts/fastuniq_wrapper.sh",  # FIXME
        r1="{config[outdir]}/preprocess/reads/{mgen}/r1{stem}fq.gz",
        r2="{config[outdir]}/preprocess/reads/{mgen}/r2{stem}fq.gz",
    resources:
        mem_mb=10_000,
    shell:
        "{input.script} {input.r1} {input.r2} {output.r1} {output.r2}"


## Adapter trim
rule trim_adapters:
    output:
        fq=temp("{config[outdir]}/preprocess/reads/{mgen}/{stem}.deadapt.fq.gz"),
    input:
        adapters="ref/illumina_adapters.fn",
        fq="{config[outdir]}/preprocess/reads/{mgen}/{stem}.fq.gz",
    log:
        "log/{stem}.scythe.log",
    threads: 2
    shell:
        """
        scythe -a {input.adapters} {input.fq} 2>{log} | gzip -c > {output.fq}
        ! grep -Fxq 'Blank FASTA header or sequence in adapters file.' {log}
        """


## Quality trim
rule quality_trim_reads:
    output:
        r1=temp("{config[outdir]}/preprocess/reads/{mgen}/r1{stem}qtrim.fq.gz"),
        r2=temp("{config[outdir]}/preprocess/reads/{mgen}/r2{stem}qtrim.fq.gz"),
        r3=temp("{config[outdir]}/preprocess/reads/{mgen}/r3{stem}qtrim.fq.gz"),
    input:
        r1="{config[outdir]}/preprocess/reads/{mgen}/r1{stem}fq.gz",
        r2="{config[outdir]}/preprocess/reads/{mgen}/r2{stem}fq.gz",
    params:
        qual_type="sanger",
        qual_thresh=20,
    shell:
        """
        sickle pe -t {params.qual_type} -q {params.qual_thresh} --gzip-output \
            --pe-file1 {input.r1} --pe-file2 {input.r2} \
            --output-pe1 {output.r1} --output-pe2 {output.r2} \
            --output-single {output.r3}
        """

## Alias Preprocessed Reads
rule alias_preprocessed_reads:
    output: "{config[outdir]}/preprocess/reads/{mgen}/{stem}.proc.fq.gz"
    input:  "{config[outdir]}/preprocess/reads/{mgen}/{stem}.{config[preprocess_infix]}.fq.gz"
    shell:
        "ln {input} {output}"


# MIDAS and Pangenome Profiling
## Initialize MIDASDB locally
rule download_midasdb_for_species:
    output:
        flag="{config[outdir]}/midas/midasdb_initialized.flag"
    input:
        species_list="{config[outdir]}/input/species.list",
    params:
        dir=config["midasdb_dir"]
    conda:
        "conda/midas.yaml"
    shell:
        """
        false  # FIXME: midas downloaddb; Figure out how to reliable download all species.
        """


rule symlink_midasdb_gene_metadata:
    output:
        "{config[outdir]}/midas/species/{species}/genes_info.tsv"
    input:
        "{config[outdir]}/midas/midasdb_initialized.flag"
    params:
        dir=config["midasdb_dir"]
    shell:
        """
        ln -rs $(realpath {params.dir}/pangenomes/{wildcards.species}/genes_info.tsv") {output}
        """



## Build MIDASDB index
rule build_midas_pangenomes_bowtie_index:
    output:
        dir=directory("{config[outdir]}/midas/pangenome_reference.bt2.d"),
    input:
        midasdb_dir=config["midasdb_dir"],
        species_list="{config[outdir]}/input/species.list",
    params:
        midasdb_name="uhgg",
    conda:
        "conda/midas3.yaml"
    threads: 96
    resources:
        mem_mb=480_000,
    shell:
        """
        midas2 build_bowtie2db \
                --bt2_indexes_dir {output.dir} \
                --bt2_indexes_name pangenomes \
                --midasdb_name {params.midasdb_name} \
                --midasdb_dir {input.midasdb_dir} \
                --select_threshold=-1 \
                --species_list {input.species_list} \
                --num_cores {threads} \
                --prune_centroids \
                --remove_singleton
        """

## Align
rule run_midas_genes_align_only:
    output:
        bam=precious("{config[outdir]}/midas/reads/{mgen}/pangenome_profile_raw.bam"),
    input:
        species_list="{config[outdir]}/input/species.list",
        midasdb_dir=config["midasdb_dir"],
        bowtie_indexes="{config[outdir]}/midas/pangenome_reference.bt2.d",
        r1="{config[outdir]}/preprocess/reads/{mgen}/r1.proc.fq.gz",
        r2="{config[outdir]}/preprocess/reads/{mgen}/r2.proc.fq.gz",
    params:
        outdir="{config[outdir]}/midas/reads/{mgen}/pangenome_profile.midas.d",
        outbam="{config[outdir]}/midas/reads/{mgen}/pangenome_profile.midas.d/{mgen}/genes/{mgen}.bam",
        midasdb_name="uhgg",
    conda:
        "conda/midas3.yaml"
    threads: 4
    resources:
        mem_mb=80_000,
    shell:
        """
        midas run_genes --num_cores {threads} \
                -1 {input.r1} -2 {input.r2} \
                --sample_name {wildcards.mgen} \
                --midasdb_name {params.midasdb_name} \
                --prebuilt_bowtie2_indexes {input.bowtie_indexes}/pangenomes \
                --prebuilt_bowtie2_species {input.species_list} \
                --select_threshold=-1 \
                --aln_speed sensitive \
                --aln_extra_flags '--mm --ignore-quals' \
                --total_depth 0 \
                --cluster_level 75 \
                --alignment_only \
                {params.outdir}
        ln {params.outbam} {output.bam}
        """

## Profile
rule midas_profile_genes:
    output:
        temp("{config[outdir]}/midas/reads/{mgen}/pangenome_profile_raw.gene_mapping_tally.tsv.bz2"),
    input:
        "{config[outdir]}/midas/reads/{mgen}/pangenome_profile_raw.bam",
    conda:
        "conda/bowtie2.yaml"
    threads: 1
    shell:
        """
        samtools depth -@ {threads} -g SECONDARY --min-MQ 0 {input} \
            | awk -v OFS='\t' '\\
                BEGIN {{gene_id="__START__"; depth_tally=0}} \\
                $1==gene_id {{depth_tally+=$3}} \\
                $1!=gene_id {{print gene_id, depth_tally; gene_id=$1; depth_tally=0}} \\
                END {{print gene_id,depth_tally}} \\
                ' \
            | (echo 'gene_id\ttally'; sed '1,1d') \
            | lz4 -9 -zc > {output}.temp
        mv {output}.temp {output}
        """

## Merge
rule merge_and_aggregate_pangenome_profiles:
    output:
        temp("{config[outdir]}/midas/species/{species}/pangenome_profile.depth.tsv.bz2"),
    input:
        script="scripts/merge_and_aggregate_pangenome_profiles.py",
        samples=lambda w: [
            f"{config[outdir]}/midas/reads/{mgen}/pangenome_profile_raw.gene_mapping_tally.tsv.lz4"
            for mgen in config[mgen_list]
        ],
        gene_info="{config[outdir]}/midas/species/{species}/genes_info.tsv"
    params:
        args=lambda w: [
            f"mgen={config[outdir]}/midas/reads/{mgen}/pangenome_profile_raw.gene_mapping_tally.tsv.lz4"
            for mgen in config[mgen_list]
        ],
        agg_col=f"centroid_{config[pangenome_profiling_agg_level]}",
    conda:
        "conda/toolz.yaml"
    threads: 1
    resources:
        mem_mb=20_000,
    shell:
        """
        {input.script} {input.gene_info} {params.agg_col} {output} {params.args}
        """



# GT-Pro
## Run core algorithm
rule run_gtpro:
    output:
        temp("{config[outdir]}/gtpro/reads/{mgen}/{r}.snv_counts_raw.bz2"),
    input:
        r="{config[outdir]}/preprocess/reads/{mgen}/{r}.proc.fq.gz",
        db="ref/gtpro",
    params:
        db_l=32,
        db_m=36,
        db_name=config["gtpro_ref_stem"]  # FIXME "ref/gtpro/20190723_881species",  # FIXME
    threads: 8
    resources:
        mem_mb=10_000,
    container:
        config["container"]["gtpro"]
    shell:
        """
        gzip -cd {input.r} | GT_Pro genotype -t {threads} -l {params.db_l} -m {params.db_m} -d {params.db_name} | bzip2 -c > {output}.temp
        mv {output}.temp {output}
        """

## Postprocess
rule gtpro_finish_processing_reads:
    output:
        temp("{config[outdir]}/gtpro/reads/{mgen}/snv_counts.tsv.bz2"),
    input:
        "{config[outdir]}/gtpro/reads/{mgen}/snv_counts_raw.bz2",
    container:
        config["container"]["gtpro"]
    shell:
        "false  # FIXME"

## Merge
rule merge_gtpro_counts:
    output:
        temp("{config[outdir]}/species/gtpro/{species}/snv_counts.tsv.bz2"),
    input:
        script="scripts/merge_gtpro_counts.py",  # FIXME
        r1=[f"{config[outdir]}/gtpro/reads/{mgen}/r1.snv_counts.tsv.bz2" for mgen in config["mgen_list"]]
        r2=[f"{config[outdir]}/gtpro/reads/{mgen}/r2.snv_counts.tsv.bz2" for mgen in config["mgen_list"]]
    params:
        species=lambda w: w.species,
        args=[f"{mgen}={config[outdir]}/gtpro/{mgen}/r1.snv_counts.tsv.bz2:{config[outdir]}/gtpro/{mgen}/r2.snv_counts.tsv.bz2" for mgen in config["mgen_list"]]
    threads: 6
    shell:
        """
        {input.script} {params.species} {output} {params.args}
        """


# StrainFacts
## Load
rule load_metagenotype_from_merged_gtpro:
    output:
        "{config[outdir]}/sfacts/species/{species}/snv_counts.mgtp.nc",
    input:
        "{config[outdir]}/gtpro/species/{species}/snv_counts.tsv.bz2",
    conda:
        "conda/sfacts.yaml"
    shell:
        """
        sfacts load --gtpro-metagenotype {input} {output}
        """

## Filter
rule filter_metagenotype:
    output:
        temp("{config[outdir]}/sfacts/species/{species}/{stem}.filt-poly{poly}-cvrg{cvrg}.mgtp.nc"),
    input:
        "{config[outdir]}/sfacts/species/{species}/{stem}.mgtp.nc",
    wildcard_constraints:
        poly="[0-9]+",
        cvrg="[0-9]+",
    params:
        poly=lambda w: float(w.poly) / 100,
        cvrg=lambda w: float(w.cvrg) / 100,
    conda:
        "conda/sfacts.yaml"
    resources:
        mem_mb=12_000,
    shell:
        """
        sfacts filter_mgen \
                --min-minor-allele-freq {params.poly} \
                --min-horizontal-cvrg {params.cvrg} \
                {input} {output}
        """


## Subsample
rule subset_metagenotype:
    output:
        temp("{config[outdir]}/sfacts/species/{species}/{stem}.filt-{filt_stem}.ss-g{num_positions}-block{block_number}-seed{seed}.mgtp.nc"),
    input:
        "{config[outdir]}/sfacts/species/{species}/{stem}.mgtp.nc",
    wildcard_constraints:
        num_positions=integer_wc,
        block_number=integer_wc,
        seed=integer_wc,
    params:
        seed=lambda w: int(w.seed),
        num_positions=lambda w: int(w.num_positions),
        block_number=lambda w: int(w.block_number),
    conda:
        "conda/sfacts.yaml"
    shell:
        """
        sfacts sample_mgen \
                --random-seed {params.seed} \
                --num-positions {params.num_positions} \
                --block-number {params.block_number} \
                {input} \
                {output}
        """


## Fit
rule fit_sfacts:
    output:
        fit="{config[outdir]}/sfacts/species/{species}/{stem}.fit-strat{strategy}-s{strain_exponent}-seed{seed}.sfacts-fit.nc",
        hist="{config[outdir]}/sfacts/species/{species}/{stem}.fit-strat{strategy}-s{strain_exponent}-seed{seed}.loss_history",
    input:
        mgen="{config[outdir]}/sfacts/species/{species}/{stem}.mgtp.nc",
        strategy=f"{config[sfact_strategy_dir]}/strategy{strategy}.args",
    wildcard_constraints:
        strain_exponent="[0-9]+",
        nposition="[0-9]+",
        seed="[0-9]+",
    params:
        strain_exponent=lambda w: float(w.strain_exponent) / 100,
        seed=lambda w: int(w.seed),
    resources:
        mem_mb=5_000,
    conda:
        "conda/sfacts.yaml"
    shell:
        """
        sfacts fit \
                @{input.strategy} \
                --verbose \
                --random-seed {params.seed} \
                --strain-sample-exponent {params.strain_exponent} \
                --history-outpath {output.hist} \
                -- {input.mgen} {output.fit}
        """

## Export strain details
rule export_sfacts_comm:
    output:
        "{stem}.strain_composition.tsv",
    input:
        "{stem}.sfacts-fit.nc",
    conda:
        "conda/sfacts.yaml"
    shell:
        """
        sfacts dump --community {output} {input}
        """

## Select strain-pure samples
rule identify_strain_samples:
    output:
        "{config[outdir]}/spgc/species/{species}/strain_pure_samples.tsv",
    input:
        lambda w: "{config[outdir]}/sfacts/species/{species}/{config[sfacts_string]}.strain_composition.tsv",
    params:
        frac_thresh=config['purity_threshold'],  # FIXME
    shell:
        """
        awk -v OFS='\t' -v thresh={params.frac_thresh} 'NR > 1 && $3 > thresh {{print $1,$2}}' {input} > {output}
        """


# StrainPGC
## Run
rule run_spgc:
    output:
        "{config[outdir]}/spgc/species/{species}/spgc.results.nc",
    input:
        pangenome_profile="{config[outdir]}/midas/species/{species}/pangenome_profile.depth.tsv.bz2",
        strain_pure_samples="{config[outdir]}/spgc/species/{species}/strain_pure_samples.tsv",
        species_genes="{config[outdir]}/input/species/{species}/species_genes.list"
    params:
        trim_frac_species_genes=0.15,  # FIXME: Move into config?
        species_free_thresh=1e-4,
        depth_ratio_thresh=lambda w: int(w.dthresh) / 1000,
        corr_thresh=lambda w: int(w.cthresh) / 1000,
    conda:
        "conda/toolz4.yaml"
    shell:
        """
        spgc run --full-output \
             --trim-frac-species-genes {params.trim_frac_species_genes} \
             --species-free-thresh {params.species_free_thresh} \
             --depth-ratio-thresh {params.depth_ratio_thresh} \
             --correlation-thresh {params.corr_thresh} \
             {input.pangenome_profile} \
             {input.species_genes} \
             {input.strain_pure_samples} \
             {output}
        """


## Write Gene Content
rule output_spgc_gene_content:
    output: "{config[outdir]}/results/species/{species}/spgc.gene.tsv"
    input:
        script="scripts/extract_strain_gene_hits_from_spgc_netcdf.py",  # FIXME: Is there a "dump" subcommand?
        spgc="{config[outdir]}/spgc/species/{species}/spgc.results.nc",
    conda:
        "conda/spgc.yaml"
    shell:
        "{input.script} {input.spgc} {output}"

## Aggregate metagenotype
rule aggregate_strain_metagenotype:
    output:
        "{config[outdir]}/results/species/{species}/snv_counts.strain.mgtp.nc",
    input:
        script="scripts/aggregate_strain_metagenotypes_across_strain_samples.py",
        mgtp="{config[outdir]}/sfacts/species/{species}/snv_counts.mgtp.nc",
        mapping="{config[outdir]}/spgc/species/{species}/strain_pure_samples.tsv",
    conda:
        "conda/sfacts.yaml"
    resources:
        mem_mb=10_000,
    shell:
        "{input.script} {input.mapping} {input.mgtp} {output}"


## Compile metadata
rule compile_spgc_strain_summary:
    output:
        "{config[outdir]}/results/species/{species}/spgc.strain.tsv",
    input:
        script="scripts/compile_spgc_results_metadata.py",
        # TODO: Take genotype QC and metadata from a purpose-built script.
        agg_mgtp="{config[outdir]}/results/species/{species}/snv_counts.strain_pure.mgtp.nc",
        spgc="{config[outdir]}/spgc/species/{species}/spgc.results.nc",
    params:
        ambig_thresh=0.1,
    conda:
        "conda/toolz5.yaml"
    shell:
        "{input.script} {input.spgc} {input.agg_mgtp} {params.ambig_thresh} {output}"
